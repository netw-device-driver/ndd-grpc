/*
Copyright 2020 Wim Henderickx.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

import "google/protobuf/any.proto";

package config;
option go_package = "github.com/netw-device-driver/ndd-grpc/config/configpb";

service Configuration {
    rpc Create (Request) returns (Reply) {}
    rpc Get (ResourceKey) returns (Status) {}
    rpc Update (Notification) returns (Reply) {}
    rpc Delete (ResourceKey) returns (Reply) {}
    rpc GetConfig (ConfigRequest) returns (ConfigReply) {}
    rpc GetResourceName (ResourceRequest) returns (ResourceReply) {}
  }

message ResourceRequest {
  Path path = 1;
}

message ResourceReply {
  string name = 1;
}

message ConfigRequest {
}

message ConfigReply {
  bytes data = 1;
}

message Request {
  string name = 1;
  int32 level = 2;
  Path path = 3;
  bytes data = 5;
  }

message Notification {
  int64 timestamp = 1; // Timestamp in nanoseconds since Epoch.
  string name = 2; // the name of the resource this notifcation applies to
  int32 level = 3; // the level of the resource this notification applies to
  repeated Update update = 4; // Data elements that have changed values.
  repeated Path delete = 5; // Data elements that have been deleted.
  // This notification contains a set of paths that are always updated together
  // referenced by a globally unique prefix.
  bool atomic = 6;
}

message Update {
  Path path = 1;                      // The path (key) for the update.
  TypedValue val = 2;                 // The explicitly typed update value.
}

// TypedValue is used to encode a value being sent between the client and
// target (originated by either entity).
message TypedValue {
  // One of the fields within the val oneof is populated with the value
  // of the update. The type of the value being included in the Update
  // determines which field should be populated. In the case that the
  // encoding is a particular form of the base protobuf type, a specific
  // field is used to store the value (e.g., json_val).
  oneof value {
    string string_val = 1;            // String value.
    int64 int_val = 2;                // Integer value.
    uint64 uint_val = 3;              // Unsigned integer value.
    bool bool_val = 4;                // Bool value.
    bytes bytes_val = 5;              // Arbitrary byte sequence value.
    float float_val = 6;              // Floating point value.
    Decimal64 decimal_val = 7;        // Decimal64 encoded value.
    ScalarArray leaflist_val = 8;     // Mixed type scalar array value.
    google.protobuf.Any any_val = 9;  // protobuf.Any encoded bytes.
    bytes json_val = 10;              // JSON-encoded text.
    bytes json_ietf_val = 11;         // JSON-encoded text per RFC7951.
    string ascii_val = 12;            // Arbitrary ASCII text.
    // Protobuf binary encoded bytes. The message type is not included.
    // See the specification at
    // github.com/openconfig/reference/blob/master/rpc/gnmi/protobuf-vals.md
    // for a complete specification.
    bytes proto_bytes = 13;
  }
}

// Decimal64 is used to encode a fixed precision decimal number. The value
// is expressed as a set of digits with the precision specifying the
// number of digits following the decimal point in the digit set.
message Decimal64 {
  int64 digits = 1;         // Set of digits.
  uint32 precision = 2;     // Number of digits following the decimal point.
}

// ScalarArray is used to encode a mixed-type array of values.
message ScalarArray {
  // The set of elements within the array. Each TypedValue message should
  // specify only elements that have a field identifier of 1-7 (i.e., the
  // values are scalar values).
  repeated TypedValue element = 1;
}

message ResourceKey {
  string name = 1;
  int32 level = 2;
}

message Reply {
}

message Status {
  enum ResourceStatus {
    None = 0;
    Success = 1;
    Failed = 2;
    CreatePending = 3;
    UpdatePending = 4;
    DeletePending = 5;
  }
  string name = 1;
  int32 level = 2;
  Path path = 3;
  bytes data = 4;
  ResourceStatus status = 5;
  repeated Deviation deviation = 6;
  bool exists = 7;
}

message Deviation {
  enum Operation {
    Delete = 0;
    Add = 1;
    Replace = 2; 
  }
  Operation operation = 4;
  Path path = 1;
  bytes value = 2;
  bytes oldValue = 3;
  
}

// Path encodes a data tree path as a series of repeated strings, with
// each element of the path representing a data tree node name and the
// associated attributes.
// Reference: gNMI Specification Section 2.2.2.
message Path {
  repeated PathElem elem = 3;         // Elements of the path.
}

// PathElem encodes an element of a path, along with any attributes (keys)
// that may be associated with it.
message PathElem {
  string name = 1;                    // The name of the element in the path.
  map<string, string> key = 2;        // Map of key (attribute) name to value.
}